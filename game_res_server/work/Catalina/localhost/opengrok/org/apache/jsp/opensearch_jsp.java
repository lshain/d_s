/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.32
 * Generated at: 2014-07-07 07:42:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Set;
import org.opensolaris.opengrok.web.Util;
import org.opensolaris.opengrok.web.PageConfig;
import java.util.TreeSet;
import org.opensolaris.opengrok.web.Prefix;
import org.opensolaris.opengrok.web.PageConfig;
import org.opensolaris.opengrok.configuration.Project;

public final class opensearch_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {


    private PageConfig cfg;

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/pageconfig.jspf", Long.valueOf(1396943084000L));
    _jspx_dependants.put("/projects.jspf", Long.valueOf(1396943084000L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"error.jsp", false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;


/* ---------------------- projects.jspf start --------------------- */
{
    // Use UTF-8 if no encoding is specified in the request
    if (request.getCharacterEncoding() == null) {
        request.setCharacterEncoding("UTF-8");
    }

    cfg = PageConfig.get(request);
    cfg.getEnv().setUrlPrefix(request.getContextPath() + Prefix.SEARCH_R + "?");

    String projects = cfg.getRequestedProjectsAsString();
    if (projects.length() != 0) {
        Cookie cookie = new Cookie("OpenGrokProject", projects);
        response.addCookie(cookie);
    }
}
/* ---------------------- projects.jspf end --------------------- */


    /* ---------------------- opensearch.jsp start --------------------- */
{
    cfg = PageConfig.get(request);

    // Optimize for URLs up to 128 characters. 
    StringBuilder url = new StringBuilder(128);
    String ForwardedHost = request.getHeader("X-Forwarded-Host");
    String scheme = request.getScheme();
    int port = request.getServerPort();

    url.append(scheme).append("://");

    // Play nice in proxy environment by using hostname from the original
    // request to construct the URLs.
    // Will not work well if the scheme or port is different for proxied server
    // and original server. Unfortunately the X-Forwarded-Host does not seem to
    // contain the port number so there is no way around it.
    if (ForwardedHost != null) {
        url.append(ForwardedHost);
    } else {
        url.append(request.getServerName());

        // Append port if needed.
        if ((port != 80 && scheme.equals("http")) ||
                   (port != 443 && scheme.equals("https"))) {
            url.append(':').append(port);
        }
    }

    String imgurl = url +  cfg.getCssDir() + "/img/icon.png";

    /* TODO  Bug 11749 ??? */
    StringBuilder text = new StringBuilder();
    url.append(request.getContextPath()).append(Prefix.SEARCH_P).append('?');
    Set<String> projects = cfg.getRequestedProjects();
    for (String name : projects) {
        text.append(name).append(',');
        Util.appendQuery(url, "project", name);
    }
    if (text.length() != 0) {
        text.setLength(text.length()-1);
    }

      out.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
      out.write("<OpenSearchDescription xmlns=\"http://a9.com/-/spec/opensearch/1.1/\">\n");
      out.write("    <ShortName>OpenGrok ");
      out.print( text.toString() );
      out.write("</ShortName>\n");
      out.write("    <Description>Search in OpenGrok ");
      out.print( text.toString() );
      out.write("</Description>\n");
      out.write("    <InputEncoding>UTF-8</InputEncoding>\n");
      out.write("    <Image height=\"16\" width=\"16\" type=\"image/png\">");
      out.print( imgurl );
      out.write("</Image>\n");
      out.write("\n");
      out.write("    <Url template=\"");
      out.print( url.toString() );
      out.write("&amp;q={searchTerms}\" type=\"text/html\"/>\n");
      out.write("</OpenSearchDescription>\n");

}
/* ---------------------- opensearch.jsp end --------------------- */

      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
